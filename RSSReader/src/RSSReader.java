import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Sean Kelley
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Assigns a variable to the 'title' variable
        String title = "";
        if (getChildElement(channel, "title") >= 0) {
            title = channel.child(getChildElement(channel, "title")).child(0)
                    .label();
        } else if (getChildElement(channel, "description") >= 0) {
            title = channel.child(getChildElement(channel, "description"))
                    .label();
        } else {
            title = "No information";
        }
        // Assigns a string to the 'description' variable
        String description = "";
        if (channel.child(getChildElement(channel, "description"))
                .numberOfChildren() < 0) {
            description = "No Description.";
        } else {
            description = channel.child(getChildElement(channel, "description"))
                    .child(0).label();
        }

        // Prints out html header information:
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println(
                "<h1><a href=\""
                        + channel.child(getChildElement(channel, "link"))
                                .child(0).label()
                        + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

        // Loops through the root xml and finds any child labeled 'item' and
        // adds it as an argument for the processItem method.
        int i = 0;
        while (channel.numberOfChildren() > i) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), out);
            }
            i++;
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = 0;
        int childNum = 0;
        boolean foundTag = false;

        while (i < xml.numberOfChildren() && !foundTag) {
            if (tag.equals(xml.child(i).label())) {
                foundTag = true;
                childNum = i;
            }
            ++i;
        }
        if (!foundTag) {
            childNum = -1;
        }
        return childNum;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        // Assigns a value to the String pubDate if there is a date listed
        String pubDate = "";
        if (item.child(getChildElement(item, "pubDate"))
                .numberOfChildren() < 1) {
            pubDate = "No Date Available";
        } else {
            pubDate = item.child(getChildElement(item, "pubDate")).child(0)
                    .label();
        }
        out.println("<th>" + pubDate + "</th>");

        // Assigns a value to the source and soruceURL variables.
        String source = "No Source Available.";
        String sourceURL = "";
        int i = 0, x = -1;
        while (item.numberOfChildren() > i) {
            if (item.child(i).label().equals("source")) {
                x = 0;
            }
            i++;
        }
        if (x == 0) {
            source = item.child(getChildElement(item, "source")).child(0)
                    .label();
            sourceURL = item.child(getChildElement(item, "source"))
                    .attributeValue("url");
            out.println(
                    "<th><a href=\"" + sourceURL + "\">" + source + "</th>");
        } else {
            out.println("<th>" + source + "</th>");
        }

        // Assigns a value to the news variable by checking if 'title' has a
        // value or 'description' value
        String news = "No description";
        if (getChildElement(item, "title") >= 0) {
            news = item.child(getChildElement(item, "title")).child(0).label();
        } else if (getChildElement(item, "description") >= 0) {
            news = item.child(getChildElement(item, "description")).child(0)
                    .label();
        }

        String link = "";
        if (getChildElement(item, "link") > 0) {
            link = item.child(getChildElement(item, "link")).child(0).label();
        }

        out.println("<th><a href=\"" + link + "\">" + news + "</th>");

        // closes the table.
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        boolean validURL = false;

        out.print("Enter a valid URL of a RSS 2.0 feed: ");
        String inputURL = in.nextLine();
        XMLTree xml = null;

        while (!validURL) {
            if (inputURL.contains(".com")) {
                xml = new XMLTree1(inputURL);
                validURL = true;
            } else {
                out.print("Enter a valid URL of a RSS 2.0 feed: ");
                inputURL = in.nextLine();
            }
        }

        out.print("Please name the output file: ");
        String outfileName = in.nextLine();

        SimpleWriter fileOut = new SimpleWriter1L(outfileName);

        outputHeader(xml.child(0), fileOut);
        outputFooter(fileOut);

        in.close();
        out.close();
    }

}
